<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        7FrwBWxXSgAAAABJRU5ErkJggg==
</value>
  </data>
</root>